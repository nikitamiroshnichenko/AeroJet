/*
 * FieldInfo.hpp
 *
 * Copyright © 2024 AeroJet Developers. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#include "Java/ClassFile/Attributes/AttributeInfo.hpp"
#include "Stream/JavaClassStream.hpp"
#include "Types.hpp"

#include <vector>

namespace AeroJet::Java::ClassFile
{
    class FieldInfo
    {
      public:
        enum class AccessFlags : u2
        {
            ACC_PUBLIC = 0x0001,
            ACC_PRIVATE = 0x0002,
            ACC_PROTECTED = 0x0004,
            ACC_STATIC = 0x0008,
            ACC_FINAL = 0x0010,
            ACC_VOLATILE = 0x0040,
            ACC_TRANSIENT = 0x0080,
            ACC_SYNTHETIC = 0x1000,
            ACC_ENUM = 0x4000
        };

        FieldInfo(u2 accessFlags, u2 nameIndex, u2 descriptorIndex, const std::vector<AttributeInfo>& attributes);

        /**
         * The value of the access_flags item is a mask of flags used to denote access permission to and properties of
         * this field. The interpretation of each flag, when set, is specified in Table 4.5-A.
         *
         * Table 4.5-A. Field access and property flags
         * -------------------------------------------------------------------------------------------------------------
         * |Flag Name 	    |  Value | Interpretation                                                                  |
         * |-----------------------------------------------------------------------------------------------------------|
         * |ACC_PUBLIC 	    | 0x0001 | Declared public; may be accessed from outside its package.                      |
         * |ACC_PRIVATE 	| 0x0002 | Declared private; usable only within the defining class.                        |
         * |ACC_PROTECTED 	| 0x0004 | Declared protected; may be accessed within subclasses.                          |
         * |ACC_STATIC 	    | 0x0008 | Declared static.                                                                |
         * |ACC_FINAL 	    | 0x0010 | Declared final; never directly assigned to after object construction (JLS §17.5)|
         * |ACC_VOLATILE 	| 0x0040 | Declared volatile; cannot be cached.                                            |
         * |ACC_TRANSIENT 	| 0x0080 | Declared transient; not written or read by a persistent object manager.         |
         * |ACC_SYNTHETIC 	| 0x1000 | Declared synthetic; not present in the source code.                             |
         * |ACC_ENUM 	    | 0x4000 | Declared as an element of an enum.                                              |
         * -------------------------------------------------------------------------------------------------------------
         *
         * Fields of classes may set any of the flags in Table 4.5-A. However, each field of a class may have at most
         * one of its ACC_PUBLIC, ACC_PRIVATE, and ACC_PROTECTED flags set (JLS §8.3.1), and must not have both its
         * ACC_FINAL and ACC_VOLATILE flags set (JLS §8.3.1.4).
         *
         * Fields of interfaces must have their ACC_PUBLIC, ACC_STATIC, and ACC_FINAL flags set; they may have their
         * ACC_SYNTHETIC flag set and must not have any of the other flags in Table 4.5-A set (JLS §9.3).
         *
         * The ACC_SYNTHETIC flag indicates that this field was generated by a compiler and does not appear in source code.
         *
         * The ACC_ENUM flag indicates that this field is used to hold an element of an enumerated type.
         *
         * All bits of the access_flags item not assigned in Table 4.5-A are reserved for future use. They should be
         * set to zero in generated class files and should be ignored by Java Virtual Machine implementations.
         */
        [[nodiscard]] AccessFlags accessFlags() const;

        /**
         * The value of the name_index item must be a valid index into the constant_pool table.
         * The constant_pool entry at that index must be a CONSTANT_Utf8_info structure (§4.4.7) which represents
         * a valid unqualified name denoting a field (§4.2.2).
         */
        [[nodiscard]] u2 nameIndex() const;

        /**
         * The value of the descriptor_index item must be a valid index into the constant_pool table.
         * The constant_pool entry at that index must be a CONSTANT_Utf8_info structure (§4.4.7) which
         * represents a valid field descriptor (§4.3.2).
         */
        [[nodiscard]] u2 descriptorIndex() const;

        /**
         * Each value of the attributes table must be an attribute_info structure (§4.7).
         *
         * A field can have any number of optional attributes associated with it.
         *
         * The attributes defined by this specification as appearing in the attributes table of a field_info structure are listed in Table 4.7-C.
         *
         * The rules concerning attributes defined to appear in the attributes table of a field_info structure are given in §4.7.
         *
         * The rules concerning non-predefined attributes in the attributes table of a field_info structure are given in §4.7.1.
         */
        [[nodiscard]] const std::vector<AttributeInfo>& attributes() const;

        template<typename T>
        static FieldInfo read(Stream::JavaClassStream<T>& stream)
        {
            const u2 accessFlags = stream.template read<u2>();
            const u2 nameIndex = stream.template read<u2>();
            const u2 descriptorIndex = stream.template read<u2>();

            const u2 attributesCount = stream.template read<u2>();
            std::vector<AttributeInfo> attributes = stream.template readSome<AeroJet::Java::ClassFile::AttributeInfo>(attributesCount);

            return { accessFlags, nameIndex, descriptorIndex, attributes };
        }

      protected:
        u2 m_accessFlags;
        u2 m_nameIndex;
        u2 m_descriptorIndex;
        std::vector<AttributeInfo> m_attributes;
    };
} // namespace AeroJet::Java::ClassFile

inline bool operator&(AeroJet::Java::ClassFile::FieldInfo::AccessFlags first, AeroJet::Java::ClassFile::FieldInfo::AccessFlags second)
{
    return static_cast<AeroJet::u2>(first) & static_cast<AeroJet::u2>(second);
}
